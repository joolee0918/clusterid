// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dAMH
double dAMH(NumericVector u, double rho, bool logf);
RcppExport SEXP _clusterid_dAMH(SEXP uSEXP, SEXP rhoSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(dAMH(u, rho, logf));
    return rcpp_result_gen;
END_RCPP
}
// vdAMH
NumericVector vdAMH(NumericVector u1, NumericVector u2, NumericVector rho, bool logf);
RcppExport SEXP _clusterid_vdAMH(SEXP u1SEXP, SEXP u2SEXP, SEXP rhoSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(vdAMH(u1, u2, rho, logf));
    return rcpp_result_gen;
END_RCPP
}
// dClayton
double dClayton(NumericVector u, double rho, bool logf);
RcppExport SEXP _clusterid_dClayton(SEXP uSEXP, SEXP rhoSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(dClayton(u, rho, logf));
    return rcpp_result_gen;
END_RCPP
}
// dFrank
double dFrank(NumericVector u, double rho, bool logf);
RcppExport SEXP _clusterid_dFrank(SEXP uSEXP, SEXP rhoSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(dFrank(u, rho, logf));
    return rcpp_result_gen;
END_RCPP
}
// vdFrank
NumericVector vdFrank(NumericVector u1, NumericVector u2, double rho, bool logf);
RcppExport SEXP _clusterid_vdFrank(SEXP u1SEXP, SEXP u2SEXP, SEXP rhoSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(vdFrank(u1, u2, rho, logf));
    return rcpp_result_gen;
END_RCPP
}
// dcopf
double dcopf(NumericVector u, double rho, bool logf, int copula);
RcppExport SEXP _clusterid_dcopf(SEXP uSEXP, SEXP rhoSEXP, SEXP logfSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(dcopf(u, rho, logf, copula));
    return rcpp_result_gen;
END_RCPP
}
// vdcopf
NumericVector vdcopf(NumericVector u1, NumericVector u2, double rho, bool logf, int copula);
RcppExport SEXP _clusterid_vdcopf(SEXP u1SEXP, SEXP u2SEXP, SEXP rhoSEXP, SEXP logfSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(vdcopf(u1, u2, rho, logf, copula));
    return rcpp_result_gen;
END_RCPP
}
// dccopf
double dccopf(NumericVector u, double u0, double rho, bool logf, int copula);
RcppExport SEXP _clusterid_dccopf(SEXP uSEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP logfSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(dccopf(u, u0, rho, logf, copula));
    return rcpp_result_gen;
END_RCPP
}
// vdccopf
NumericVector vdccopf(NumericVector u1, NumericVector u2, NumericVector u0, double rho, bool logf, int copula);
RcppExport SEXP _clusterid_vdccopf(SEXP u1SEXP, SEXP u2SEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP logfSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type logf(logfSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(vdccopf(u1, u2, u0, rho, logf, copula));
    return rcpp_result_gen;
END_RCPP
}
// pClayton
double pClayton(NumericVector u, double rho);
RcppExport SEXP _clusterid_pClayton(SEXP uSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pClayton(u, rho));
    return rcpp_result_gen;
END_RCPP
}
// pFrank
double pFrank(NumericVector u, double rho);
RcppExport SEXP _clusterid_pFrank(SEXP uSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pFrank(u, rho));
    return rcpp_result_gen;
END_RCPP
}
// pAMH
double pAMH(NumericVector u, double rho);
RcppExport SEXP _clusterid_pAMH(SEXP uSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(pAMH(u, rho));
    return rcpp_result_gen;
END_RCPP
}
// pccopf
double pccopf(NumericVector u, double u0, double rho, int copula);
RcppExport SEXP _clusterid_pccopf(SEXP uSEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(pccopf(u, u0, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// pcopf
double pcopf(NumericVector u, double rho, int copula);
RcppExport SEXP _clusterid_pcopf(SEXP uSEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(pcopf(u, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// hf
double hf(NumericVector u, IntegerVector del, double rho, int copula);
RcppExport SEXP _clusterid_hf(SEXP uSEXP, SEXP delSEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type del(delSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(hf(u, del, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// hcf
double hcf(NumericVector u, IntegerVector del, double u0, double rho, int copula);
RcppExport SEXP _clusterid_hcf(SEXP uSEXP, SEXP delSEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type del(delSEXP);
    Rcpp::traits::input_parameter< double >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(hcf(u, del, u0, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// hf_Clayton
double hf_Clayton(NumericVector u, IntegerVector del, double rho);
RcppExport SEXP _clusterid_hf_Clayton(SEXP uSEXP, SEXP delSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type del(delSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(hf_Clayton(u, del, rho));
    return rcpp_result_gen;
END_RCPP
}
// hf_Frank
double hf_Frank(NumericVector u, IntegerVector del, double theta);
RcppExport SEXP _clusterid_hf_Frank(SEXP uSEXP, SEXP delSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u(uSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type del(delSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(hf_Frank(u, del, theta));
    return rcpp_result_gen;
END_RCPP
}
// h1
double h1(double u1, double u2, double rho, int copula);
RcppExport SEXP _clusterid_h1(SEXP u1SEXP, SEXP u2SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(h1(u1, u2, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// hc1
double hc1(double u1, double u2, double u0, double rho, int copula);
RcppExport SEXP _clusterid_hc1(SEXP u1SEXP, SEXP u2SEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(hc1(u1, u2, u0, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// vh1
NumericVector vh1(NumericVector u1, NumericVector u2, double rho, int copula);
RcppExport SEXP _clusterid_vh1(SEXP u1SEXP, SEXP u2SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(vh1(u1, u2, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// vhc1
NumericVector vhc1(NumericVector u1, NumericVector u2, NumericVector u0, double rho, int copula);
RcppExport SEXP _clusterid_vhc1(SEXP u1SEXP, SEXP u2SEXP, SEXP u0SEXP, SEXP rhoSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type u0(u0SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(vhc1(u1, u2, u0, rho, copula));
    return rcpp_result_gen;
END_RCPP
}
// hpc
NumericVector hpc(NumericVector x, NumericVector levels, NumericVector cuts, int logf);
RcppExport SEXP _clusterid_hpc(SEXP xSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(hpc(x, levels, cuts, logf));
    return rcpp_result_gen;
END_RCPP
}
// Hpc
NumericVector Hpc(NumericVector x, NumericVector levels, NumericVector cuts, int logf);
RcppExport SEXP _clusterid_Hpc(SEXP xSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(Hpc(x, levels, cuts, logf));
    return rcpp_result_gen;
END_RCPP
}
// ppc
double ppc(double q, NumericVector levels, NumericVector cuts, int lower, int logf);
RcppExport SEXP _clusterid_ppc(SEXP qSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP lowerSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(ppc(q, levels, cuts, lower, logf));
    return rcpp_result_gen;
END_RCPP
}
// vppc
NumericVector vppc(NumericVector q, NumericVector levels, NumericVector cuts, int lower, int logf);
RcppExport SEXP _clusterid_vppc(SEXP qSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP lowerSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(vppc(q, levels, cuts, lower, logf));
    return rcpp_result_gen;
END_RCPP
}
// dpc
double dpc(double x, NumericVector levels, NumericVector cuts, int logf);
RcppExport SEXP _clusterid_dpc(SEXP xSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(dpc(x, levels, cuts, logf));
    return rcpp_result_gen;
END_RCPP
}
// vdpc
NumericVector vdpc(NumericVector x, NumericVector levels, NumericVector cuts, int logf);
RcppExport SEXP _clusterid_vdpc(SEXP xSEXP, SEXP levelsSEXP, SEXP cutsSEXP, SEXP logfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type levels(levelsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cuts(cutsSEXP);
    Rcpp::traits::input_parameter< int >::type logf(logfSEXP);
    rcpp_result_gen = Rcpp::wrap(vdpc(x, levels, cuts, logf));
    return rcpp_result_gen;
END_RCPP
}
// order_cpp
NumericVector order_cpp(NumericVector x);
RcppExport SEXP _clusterid_order_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// pG0
double pG0(arma::vec r_id, NumericVector G, double p);
RcppExport SEXP _clusterid_pG0(SEXP r_idSEXP, SEXP GSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type r_id(r_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pG0(r_id, G, p));
    return rcpp_result_gen;
END_RCPP
}
// pG
double pG(arma::vec r_id, NumericVector G, double p);
RcppExport SEXP _clusterid_pG(SEXP r_idSEXP, SEXP GSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type r_id(r_idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type G(GSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(pG(r_id, G, p));
    return rcpp_result_gen;
END_RCPP
}
// loglikFD2_pch
double loglikFD2_pch(NumericVector par, NumericVector theta, List Y_F, List X_F, NumericMatrix Y_proband, NumericMatrix X_proband, NumericVector Age, NumericVector Cal, NumericVector cut_F, DataFrame lam03, Function fgau, Function combn, int copula);
RcppExport SEXP _clusterid_loglikFD2_pch(SEXP parSEXP, SEXP thetaSEXP, SEXP Y_FSEXP, SEXP X_FSEXP, SEXP Y_probandSEXP, SEXP X_probandSEXP, SEXP AgeSEXP, SEXP CalSEXP, SEXP cut_FSEXP, SEXP lam03SEXP, SEXP fgauSEXP, SEXP combnSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type Y_F(Y_FSEXP);
    Rcpp::traits::input_parameter< List >::type X_F(X_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_proband(Y_probandSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_proband(X_probandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Age(AgeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cal(CalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type lam03(lam03SEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    Rcpp::traits::input_parameter< Function >::type combn(combnSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikFD2_pch(par, theta, Y_F, X_F, Y_proband, X_proband, Age, Cal, cut_F, lam03, fgau, combn, copula));
    return rcpp_result_gen;
END_RCPP
}
// loglikFD2_pch_gene
double loglikFD2_pch_gene(NumericVector par, NumericVector theta, List Y_F, List X_F, NumericMatrix Y_proband, NumericMatrix X_proband, NumericVector Age, NumericVector Cal, NumericVector cut_F, DataFrame lam03, Function fgau, Function combn, int copula);
RcppExport SEXP _clusterid_loglikFD2_pch_gene(SEXP parSEXP, SEXP thetaSEXP, SEXP Y_FSEXP, SEXP X_FSEXP, SEXP Y_probandSEXP, SEXP X_probandSEXP, SEXP AgeSEXP, SEXP CalSEXP, SEXP cut_FSEXP, SEXP lam03SEXP, SEXP fgauSEXP, SEXP combnSEXP, SEXP copulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< List >::type Y_F(Y_FSEXP);
    Rcpp::traits::input_parameter< List >::type X_F(X_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_proband(Y_probandSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_proband(X_probandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Age(AgeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cal(CalSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type lam03(lam03SEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    Rcpp::traits::input_parameter< Function >::type combn(combnSEXP);
    Rcpp::traits::input_parameter< int >::type copula(copulaSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikFD2_pch_gene(par, theta, Y_F, X_F, Y_proband, X_proband, Age, Cal, cut_F, lam03, fgau, combn, copula));
    return rcpp_result_gen;
END_RCPP
}
// loglikR_pch
double loglikR_pch(NumericVector par, NumericVector cut_F, NumericMatrix Y_R, NumericMatrix X_R, List LAM03R, List LAM12R, List cutR, Function fgau);
RcppExport SEXP _clusterid_loglikR_pch(SEXP parSEXP, SEXP cut_FSEXP, SEXP Y_RSEXP, SEXP X_RSEXP, SEXP LAM03RSEXP, SEXP LAM12RSEXP, SEXP cutRSEXP, SEXP fgauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_R(Y_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_R(X_RSEXP);
    Rcpp::traits::input_parameter< List >::type LAM03R(LAM03RSEXP);
    Rcpp::traits::input_parameter< List >::type LAM12R(LAM12RSEXP);
    Rcpp::traits::input_parameter< List >::type cutR(cutRSEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikR_pch(par, cut_F, Y_R, X_R, LAM03R, LAM12R, cutR, fgau));
    return rcpp_result_gen;
END_RCPP
}
// loglikR_pch_gene
double loglikR_pch_gene(NumericVector par, NumericVector cut_F, NumericMatrix Y_R, NumericMatrix X_R, List LAM03R, List LAM12R, List cutR, Function fgau);
RcppExport SEXP _clusterid_loglikR_pch_gene(SEXP parSEXP, SEXP cut_FSEXP, SEXP Y_RSEXP, SEXP X_RSEXP, SEXP LAM03RSEXP, SEXP LAM12RSEXP, SEXP cutRSEXP, SEXP fgauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_R(Y_RSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_R(X_RSEXP);
    Rcpp::traits::input_parameter< List >::type LAM03R(LAM03RSEXP);
    Rcpp::traits::input_parameter< List >::type LAM12R(LAM12RSEXP);
    Rcpp::traits::input_parameter< List >::type cutR(cutRSEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikR_pch_gene(par, cut_F, Y_R, X_R, LAM03R, LAM12R, cutR, fgau));
    return rcpp_result_gen;
END_RCPP
}
// loglikS_pch
double loglikS_pch(NumericVector par, NumericVector cut_F, NumericMatrix Y_S, List LAM03S, List LAM12S, List cutS, Function fgau);
RcppExport SEXP _clusterid_loglikS_pch(SEXP parSEXP, SEXP cut_FSEXP, SEXP Y_SSEXP, SEXP LAM03SSEXP, SEXP LAM12SSEXP, SEXP cutSSEXP, SEXP fgauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_S(Y_SSEXP);
    Rcpp::traits::input_parameter< List >::type LAM03S(LAM03SSEXP);
    Rcpp::traits::input_parameter< List >::type LAM12S(LAM12SSEXP);
    Rcpp::traits::input_parameter< List >::type cutS(cutSSEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikS_pch(par, cut_F, Y_S, LAM03S, LAM12S, cutS, fgau));
    return rcpp_result_gen;
END_RCPP
}
// loglikS_pch_gene
double loglikS_pch_gene(NumericVector par, NumericVector cut_F, NumericMatrix Y_S, List LAM03S, List LAM12S, List cutS, Function fgau);
RcppExport SEXP _clusterid_loglikS_pch_gene(SEXP parSEXP, SEXP cut_FSEXP, SEXP Y_SSEXP, SEXP LAM03SSEXP, SEXP LAM12SSEXP, SEXP cutSSEXP, SEXP fgauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cut_F(cut_FSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_S(Y_SSEXP);
    Rcpp::traits::input_parameter< List >::type LAM03S(LAM03SSEXP);
    Rcpp::traits::input_parameter< List >::type LAM12S(LAM12SSEXP);
    Rcpp::traits::input_parameter< List >::type cutS(cutSSEXP);
    Rcpp::traits::input_parameter< Function >::type fgau(fgauSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikS_pch_gene(par, cut_F, Y_S, LAM03S, LAM12S, cutS, fgau));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_clusterid_dAMH", (DL_FUNC) &_clusterid_dAMH, 3},
    {"_clusterid_vdAMH", (DL_FUNC) &_clusterid_vdAMH, 4},
    {"_clusterid_dClayton", (DL_FUNC) &_clusterid_dClayton, 3},
    {"_clusterid_dFrank", (DL_FUNC) &_clusterid_dFrank, 3},
    {"_clusterid_vdFrank", (DL_FUNC) &_clusterid_vdFrank, 4},
    {"_clusterid_dcopf", (DL_FUNC) &_clusterid_dcopf, 4},
    {"_clusterid_vdcopf", (DL_FUNC) &_clusterid_vdcopf, 5},
    {"_clusterid_dccopf", (DL_FUNC) &_clusterid_dccopf, 5},
    {"_clusterid_vdccopf", (DL_FUNC) &_clusterid_vdccopf, 6},
    {"_clusterid_pClayton", (DL_FUNC) &_clusterid_pClayton, 2},
    {"_clusterid_pFrank", (DL_FUNC) &_clusterid_pFrank, 2},
    {"_clusterid_pAMH", (DL_FUNC) &_clusterid_pAMH, 2},
    {"_clusterid_pccopf", (DL_FUNC) &_clusterid_pccopf, 4},
    {"_clusterid_pcopf", (DL_FUNC) &_clusterid_pcopf, 3},
    {"_clusterid_hf", (DL_FUNC) &_clusterid_hf, 4},
    {"_clusterid_hcf", (DL_FUNC) &_clusterid_hcf, 5},
    {"_clusterid_hf_Clayton", (DL_FUNC) &_clusterid_hf_Clayton, 3},
    {"_clusterid_hf_Frank", (DL_FUNC) &_clusterid_hf_Frank, 3},
    {"_clusterid_h1", (DL_FUNC) &_clusterid_h1, 4},
    {"_clusterid_hc1", (DL_FUNC) &_clusterid_hc1, 5},
    {"_clusterid_vh1", (DL_FUNC) &_clusterid_vh1, 4},
    {"_clusterid_vhc1", (DL_FUNC) &_clusterid_vhc1, 5},
    {"_clusterid_hpc", (DL_FUNC) &_clusterid_hpc, 4},
    {"_clusterid_Hpc", (DL_FUNC) &_clusterid_Hpc, 4},
    {"_clusterid_ppc", (DL_FUNC) &_clusterid_ppc, 5},
    {"_clusterid_vppc", (DL_FUNC) &_clusterid_vppc, 5},
    {"_clusterid_dpc", (DL_FUNC) &_clusterid_dpc, 4},
    {"_clusterid_vdpc", (DL_FUNC) &_clusterid_vdpc, 4},
    {"_clusterid_order_cpp", (DL_FUNC) &_clusterid_order_cpp, 1},
    {"_clusterid_pG0", (DL_FUNC) &_clusterid_pG0, 3},
    {"_clusterid_pG", (DL_FUNC) &_clusterid_pG, 3},
    {"_clusterid_loglikFD2_pch", (DL_FUNC) &_clusterid_loglikFD2_pch, 13},
    {"_clusterid_loglikFD2_pch_gene", (DL_FUNC) &_clusterid_loglikFD2_pch_gene, 13},
    {"_clusterid_loglikR_pch", (DL_FUNC) &_clusterid_loglikR_pch, 8},
    {"_clusterid_loglikR_pch_gene", (DL_FUNC) &_clusterid_loglikR_pch_gene, 8},
    {"_clusterid_loglikS_pch", (DL_FUNC) &_clusterid_loglikS_pch, 7},
    {"_clusterid_loglikS_pch_gene", (DL_FUNC) &_clusterid_loglikS_pch_gene, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_clusterid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
